{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"have_digits/","text":"Have Digits Tutorials Ensure you have a python environment installed Define the have_digits function in your python file Pass a string s as the argument. def have_digits(s): out = 0 # loop through the string for c in s: # check if the character is a digit if c.isdigit(): out = 1 break return out The function loops through each character in the string, and checks whether its a digit(number). If the string s contains a digits using python's inbuilt isdigit() function , it prints out 1 , else it will print out a 0 . How-to Guide To determine whether the string contains a digit or not: Call the function with the desired string as the argument. The function returns the True( 1 ) if the string contains a digit and False( 0 ) if the string does not. result = have_digit(\"Hel1o\") print(result) # Output = 1 (The string 'hello' contains a 1) References have_digits(s) Checks if a string has digits in it Parameters: Name Type Description Default s(string) A string being tested required Returns: Name Type Description True 1)(boolean if a string(s) has digits in it False 0)(boolean if the string(s) does not have a digit Source code in functions/have_digits.py def have_digits(s: str) -> int: \"\"\" Checks if a string has digits in it Args: s(string): A string being tested Returns: True (1)(boolean): if a string(s) has digits in it False(0)(boolean): if the string(s) does not have a digit \"\"\" out = 0 # loop through the string for c in s: # check if the character is a digit if c.isdigit(): out = 1 break return out Understanding / Explanation The have_digits function uses a secondary pyhton function isdigits() to check whether the string that gets passed contains a number/digit. The default result is 0 (False) The function loops through each digit in the string It checks whether each of the characters in the string is a digit. If the function is a digit, the fucntion will evaluate to True and return 1 .","title":"Have Digits"},{"location":"have_digits/#have-digits","text":"","title":"Have Digits"},{"location":"have_digits/#tutorials","text":"Ensure you have a python environment installed Define the have_digits function in your python file Pass a string s as the argument. def have_digits(s): out = 0 # loop through the string for c in s: # check if the character is a digit if c.isdigit(): out = 1 break return out The function loops through each character in the string, and checks whether its a digit(number). If the string s contains a digits using python's inbuilt isdigit() function , it prints out 1 , else it will print out a 0 .","title":"Tutorials"},{"location":"have_digits/#how-to-guide","text":"To determine whether the string contains a digit or not: Call the function with the desired string as the argument. The function returns the True( 1 ) if the string contains a digit and False( 0 ) if the string does not. result = have_digit(\"Hel1o\") print(result) # Output = 1 (The string 'hello' contains a 1)","title":"How-to Guide"},{"location":"have_digits/#references","text":"","title":"References"},{"location":"have_digits/#functions.have_digits.have_digits","text":"Checks if a string has digits in it Parameters: Name Type Description Default s(string) A string being tested required Returns: Name Type Description True 1)(boolean if a string(s) has digits in it False 0)(boolean if the string(s) does not have a digit Source code in functions/have_digits.py def have_digits(s: str) -> int: \"\"\" Checks if a string has digits in it Args: s(string): A string being tested Returns: True (1)(boolean): if a string(s) has digits in it False(0)(boolean): if the string(s) does not have a digit \"\"\" out = 0 # loop through the string for c in s: # check if the character is a digit if c.isdigit(): out = 1 break return out","title":"have_digits"},{"location":"have_digits/#understanding-explanation","text":"The have_digits function uses a secondary pyhton function isdigits() to check whether the string that gets passed contains a number/digit. The default result is 0 (False) The function loops through each digit in the string It checks whether each of the characters in the string is a digit. If the function is a digit, the fucntion will evaluate to True and return 1 .","title":"Understanding / Explanation"},{"location":"my_adder/","text":"My Adder Tutorials Ensure you have a python environment installed Define the my_adder function in your python file Pass the 3 numbers a, b, c as argumnets/inputs def my_adder(a: float, b: int, c: float) -> float: sum_nums = a + b + c return sum_nums With the function defined, you can now use it as in the example shown below: # Example 1 a = 1 b = 5 c = 7 sum_nums = my_adder(1, 5, 7) print(sum_nums) #EXPECTED OUTPUT = 13 How-to-Guide: The my_adder function is used to calculate the sum of 3 numbers. Call the function passing in the 3 numbers being added as inputs to the functions a, b, c The function returns the sum of the 3 numbers. print(my_adder(2, 3, 4)) # The expected output is - 9 References my_adder(a, b, c) The function does the basic mathematical addition Calculates the sum of 3 numbers by adding them using the formula sum = a + b + c Parameters: Name Type Description Default a float width of the rectangle. required b int height of the rectangle. required c float Third number required Returns: Name Type Description float float The sum of the 3 numbers Source code in functions/my_adder.py def my_adder(a: float, b: int, c: float) -> float: \"\"\" The function does the basic mathematical addition Calculates the sum of 3 numbers by adding them using the formula sum = a + b + c Args: a: width of the rectangle. b: height of the rectangle. c: Third number Returns: float: The sum of the 3 numbers \"\"\" # this is the summation out = a + b + c return out Understanding / Explanation The sum of 3 numbers is calculated by adding them up. This function is a python implementation of this basic mathematical function. The formula is: sum = first_number + second_number + third_number","title":"My Adder"},{"location":"my_adder/#my-adder","text":"","title":"My Adder"},{"location":"my_adder/#tutorials","text":"Ensure you have a python environment installed Define the my_adder function in your python file Pass the 3 numbers a, b, c as argumnets/inputs def my_adder(a: float, b: int, c: float) -> float: sum_nums = a + b + c return sum_nums With the function defined, you can now use it as in the example shown below: # Example 1 a = 1 b = 5 c = 7 sum_nums = my_adder(1, 5, 7) print(sum_nums) #EXPECTED OUTPUT = 13","title":"Tutorials"},{"location":"my_adder/#how-to-guide","text":"The my_adder function is used to calculate the sum of 3 numbers. Call the function passing in the 3 numbers being added as inputs to the functions a, b, c The function returns the sum of the 3 numbers. print(my_adder(2, 3, 4)) # The expected output is - 9","title":"How-to-Guide:"},{"location":"my_adder/#references","text":"","title":"References"},{"location":"my_adder/#functions.my_adder.my_adder","text":"The function does the basic mathematical addition Calculates the sum of 3 numbers by adding them using the formula sum = a + b + c Parameters: Name Type Description Default a float width of the rectangle. required b int height of the rectangle. required c float Third number required Returns: Name Type Description float float The sum of the 3 numbers Source code in functions/my_adder.py def my_adder(a: float, b: int, c: float) -> float: \"\"\" The function does the basic mathematical addition Calculates the sum of 3 numbers by adding them using the formula sum = a + b + c Args: a: width of the rectangle. b: height of the rectangle. c: Third number Returns: float: The sum of the 3 numbers \"\"\" # this is the summation out = a + b + c return out","title":"my_adder"},{"location":"my_adder/#understanding-explanation","text":"The sum of 3 numbers is calculated by adding them up. This function is a python implementation of this basic mathematical function. The formula is: sum = first_number + second_number + third_number","title":"Understanding / Explanation"},{"location":"my_thermo_stat/","text":"My thermostat Tutorials Ensure you have a python environment installed Define the my_thermo_stat function in your python file Pass the width and height of the rectangle as arguments. def my_thermo_stat(temp: float, desired_temp: float) -> float: if temp < desired_temp - 5: status = 'Heat' elif temp > desired_temp + 5: status = 'AC' else: status = 'off' return status With the fucntion Created, you can now use it as in the example shown below: # Example 1 temp = 65 desired_temp =75 output = my_thermo_stat(65, 75) print(output) #EXPECTED OUTPUT = 'Heat' #Example 2 temp = 72 desired_temp =75 output = my_thermo_stat(72, 75) print(output) #EXPECTED OUTPUT = 'off' #Example 3 temp = 72 desired_temp =60 output = my_thermo_stat(72, 60) print(output) #EXPECTED OUTPUT = 'AC' How-to-Guide: The my_thermo_stat function is used to determine whether a thermostat should be off , whether the AC should be on to cool the room or whether there should be Heat when the room is too cold. Call the function passing in the actual temperature temp and the desired temperature desired_temp as inputs The function returns the status of the thermostat. print(my_thermo_stat(72, 60)) # The expected output is - AC References my_thermo_stat(temp, desired_temp) The function helps regulate a thermostat's temperature Changes the status of the thermostat based on temperature and desired temperature Parameters: Name Type Description Default temp(float) The actual temeprature required desired_temp(float) The desired temperature required Returns: Name Type Description Heat string If the temperature needs to be brought up AC string If the temperature is too low off string if the temperature is within the desired_temp range Source code in functions/my_thermo_stat.py def my_thermo_stat(temp: float, desired_temp: float) -> str: \"\"\" The function helps regulate a thermostat's temperature Changes the status of the thermostat based on temperature and desired temperature Args: temp(float): The actual temeprature desired_temp(float): The desired temperature Returns: Heat(string): If the temperature needs to be brought up AC(string): If the temperature is too low off(string): if the temperature is within the desired_temp range \"\"\" if temp < desired_temp - 5: status = 'Heat' elif temp > desired_temp + 5: status = 'AC' else: status = 'off' return status Understanding / Explanation my_thermo_stat returns the status of the thermostat whether it should be off, AC or Heat depending on the temp and the desired_temp . If the temp is + or - 5 units within the desired_temp, the thermostat will be off If the temp is more than 5 units reading below the desired_temp, the thermostat will be on Heat If the temp is more than 5 units reading above the desired_temp, the thermostat will be on AC","title":"My Thermostat"},{"location":"my_thermo_stat/#my-thermostat","text":"","title":"My thermostat"},{"location":"my_thermo_stat/#tutorials","text":"Ensure you have a python environment installed Define the my_thermo_stat function in your python file Pass the width and height of the rectangle as arguments. def my_thermo_stat(temp: float, desired_temp: float) -> float: if temp < desired_temp - 5: status = 'Heat' elif temp > desired_temp + 5: status = 'AC' else: status = 'off' return status With the fucntion Created, you can now use it as in the example shown below: # Example 1 temp = 65 desired_temp =75 output = my_thermo_stat(65, 75) print(output) #EXPECTED OUTPUT = 'Heat' #Example 2 temp = 72 desired_temp =75 output = my_thermo_stat(72, 75) print(output) #EXPECTED OUTPUT = 'off' #Example 3 temp = 72 desired_temp =60 output = my_thermo_stat(72, 60) print(output) #EXPECTED OUTPUT = 'AC'","title":"Tutorials"},{"location":"my_thermo_stat/#how-to-guide","text":"The my_thermo_stat function is used to determine whether a thermostat should be off , whether the AC should be on to cool the room or whether there should be Heat when the room is too cold. Call the function passing in the actual temperature temp and the desired temperature desired_temp as inputs The function returns the status of the thermostat. print(my_thermo_stat(72, 60)) # The expected output is - AC","title":"How-to-Guide:"},{"location":"my_thermo_stat/#references","text":"","title":"References"},{"location":"my_thermo_stat/#functions.my_thermo_stat.my_thermo_stat","text":"The function helps regulate a thermostat's temperature Changes the status of the thermostat based on temperature and desired temperature Parameters: Name Type Description Default temp(float) The actual temeprature required desired_temp(float) The desired temperature required Returns: Name Type Description Heat string If the temperature needs to be brought up AC string If the temperature is too low off string if the temperature is within the desired_temp range Source code in functions/my_thermo_stat.py def my_thermo_stat(temp: float, desired_temp: float) -> str: \"\"\" The function helps regulate a thermostat's temperature Changes the status of the thermostat based on temperature and desired temperature Args: temp(float): The actual temeprature desired_temp(float): The desired temperature Returns: Heat(string): If the temperature needs to be brought up AC(string): If the temperature is too low off(string): if the temperature is within the desired_temp range \"\"\" if temp < desired_temp - 5: status = 'Heat' elif temp > desired_temp + 5: status = 'AC' else: status = 'off' return status","title":"my_thermo_stat"},{"location":"my_thermo_stat/#understanding-explanation","text":"my_thermo_stat returns the status of the thermostat whether it should be off, AC or Heat depending on the temp and the desired_temp . If the temp is + or - 5 units within the desired_temp, the thermostat will be off If the temp is more than 5 units reading below the desired_temp, the thermostat will be on Heat If the temp is more than 5 units reading above the desired_temp, the thermostat will be on AC","title":"Understanding / Explanation"},{"location":"perimeter_rect/","text":"Perimeter of a rectangle Tutorial Ensure you have a python environment installed. run python --version to check Define the perimeter_of_rect function in your python file Pass the width and height of the rectangle as arguments. def perimeter_of_rectangle(width:float, height:float) -> float: perimeter = (2 * width) + (2 * height) return perimeter With the fucntion Created, you can now use it as in the example shown below: # Example 1 given_width = 12 given_height = 3 area = perimeter_of_rect(given_width, given_height) print(area) #EXPECTED OUTPUT = 30 # Example 2 given_width = 10.2 given_height = 2.1 area = perimeter_of_rect(given_width, given_height) print(area) #Expected output = 24.6 How-to-Guides To calculate the perimeter of a rectangle using the perimeter_of_rect function: Call the function with width and height of the rectangle as arguments. The function returns the perimeter. perimeter = perimeter_of_rect(2, 5) print(perimeter) # Output = 14 Reference: perimeter_of_rectangle(width, height) Calculates the perimeter of a rectangle Takes the width and height of the rectangle and returns the perimeter using permieter = 2(length + width) Parameters: Name Type Description Default width float width of the rectangle. required height float height of the rectangle. required Returns: Name Type Description float float The perimeter of the rectangle Source code in functions/perimeter_of_rect.py def perimeter_of_rectangle(width:float, height:float) -> float: \"\"\"Calculates the perimeter of a rectangle Takes the width and height of the rectangle and returns the perimeter using permieter = 2(length + width) Args: width (float): width of the rectangle. height (float): height of the rectangle. Returns: float: The perimeter of the rectangle \"\"\" perimeter = (2 * width) + (2 * height) return perimeter Understanding / Explanation The perimeter of a rectangle is the distance around a rectangle. And since the rectangle has 2 sides each of equal lengths, we use the formula perimeter = 2xlength + 2xwidth This function is a python implementation of this basic mathematical function.","title":"Perimeter of Rectangle"},{"location":"perimeter_rect/#perimeter-of-a-rectangle","text":"","title":"Perimeter of a rectangle"},{"location":"perimeter_rect/#tutorial","text":"Ensure you have a python environment installed. run python --version to check Define the perimeter_of_rect function in your python file Pass the width and height of the rectangle as arguments. def perimeter_of_rectangle(width:float, height:float) -> float: perimeter = (2 * width) + (2 * height) return perimeter With the fucntion Created, you can now use it as in the example shown below: # Example 1 given_width = 12 given_height = 3 area = perimeter_of_rect(given_width, given_height) print(area) #EXPECTED OUTPUT = 30 # Example 2 given_width = 10.2 given_height = 2.1 area = perimeter_of_rect(given_width, given_height) print(area) #Expected output = 24.6","title":"Tutorial"},{"location":"perimeter_rect/#how-to-guides","text":"To calculate the perimeter of a rectangle using the perimeter_of_rect function: Call the function with width and height of the rectangle as arguments. The function returns the perimeter. perimeter = perimeter_of_rect(2, 5) print(perimeter) # Output = 14","title":"How-to-Guides"},{"location":"perimeter_rect/#reference","text":"","title":"Reference:"},{"location":"perimeter_rect/#functions.perimeter_of_rect.perimeter_of_rectangle","text":"Calculates the perimeter of a rectangle Takes the width and height of the rectangle and returns the perimeter using permieter = 2(length + width) Parameters: Name Type Description Default width float width of the rectangle. required height float height of the rectangle. required Returns: Name Type Description float float The perimeter of the rectangle Source code in functions/perimeter_of_rect.py def perimeter_of_rectangle(width:float, height:float) -> float: \"\"\"Calculates the perimeter of a rectangle Takes the width and height of the rectangle and returns the perimeter using permieter = 2(length + width) Args: width (float): width of the rectangle. height (float): height of the rectangle. Returns: float: The perimeter of the rectangle \"\"\" perimeter = (2 * width) + (2 * height) return perimeter","title":"perimeter_of_rectangle"},{"location":"perimeter_rect/#understanding-explanation","text":"The perimeter of a rectangle is the distance around a rectangle. And since the rectangle has 2 sides each of equal lengths, we use the formula perimeter = 2xlength + 2xwidth This function is a python implementation of this basic mathematical function.","title":"Understanding / Explanation"},{"location":"rectangle-Area/","text":"Area of a rectangle Tutorials Ensure you have a python environment installed Define the area_of_rectangle function in your python file Pass the width and height of the rectangle as arguments. def area_of_rectangle(width: float | int, height:float | int) -> float | int: return width * height With the fucntion Created, you can now use it as in the example shown below: # Example 1 given_width = 12 given_height = 3 area = area_of_rectangle(given_width, given_height) print(area) #EXPECTED OUTPUT = 36 #eXAMPLE 2 given_width = 10.2 given_height = 2.1 area = area_of_rectangle(given_width, given_height) print(area) #Expected output = 21.42 How-to-Guides To calculate the area of a rectangle using the area_of_rectangle function: 1. Call the function with width and height of the rectangle as arguments. 2. The function returns the area. area = area_of_rectangle(2, 5) print(area) # Output = 10 Reference: area_of_rectangle(width, height) Calculates the area of a rectangle. Takes the width and height of a rectangle and returns the area using area = width * height. Parameters: Name Type Description Default width float width of the rectangle. required height float height of the rectangle. required Returns: Name Type Description float float The area of the rectangle Source code in functions/area_of_rectangle.py def area_of_rectangle(width: float, height:float) -> float: \"\"\"Calculates the area of a rectangle. Takes the width and height of a rectangle and returns the area using area = width * height. Args: width (float): width of the rectangle. height (float): height of the rectangle. Returns: float: The area of the rectangle \"\"\" return width * height Understanding / Explanation The area of a rectangle is calculated by multipying the rectangle's width by the height. This function is a python implementation of this basic mathematical function. The formula is: Area = width x Height","title":"Area of Rectangle"},{"location":"rectangle-Area/#area-of-a-rectangle","text":"","title":"Area of a rectangle"},{"location":"rectangle-Area/#tutorials","text":"Ensure you have a python environment installed Define the area_of_rectangle function in your python file Pass the width and height of the rectangle as arguments. def area_of_rectangle(width: float | int, height:float | int) -> float | int: return width * height With the fucntion Created, you can now use it as in the example shown below: # Example 1 given_width = 12 given_height = 3 area = area_of_rectangle(given_width, given_height) print(area) #EXPECTED OUTPUT = 36 #eXAMPLE 2 given_width = 10.2 given_height = 2.1 area = area_of_rectangle(given_width, given_height) print(area) #Expected output = 21.42","title":"Tutorials"},{"location":"rectangle-Area/#how-to-guides","text":"To calculate the area of a rectangle using the area_of_rectangle function: 1. Call the function with width and height of the rectangle as arguments. 2. The function returns the area. area = area_of_rectangle(2, 5) print(area) # Output = 10","title":"How-to-Guides"},{"location":"rectangle-Area/#reference","text":"","title":"Reference:"},{"location":"rectangle-Area/#functions.area_of_rectangle.area_of_rectangle","text":"Calculates the area of a rectangle. Takes the width and height of a rectangle and returns the area using area = width * height. Parameters: Name Type Description Default width float width of the rectangle. required height float height of the rectangle. required Returns: Name Type Description float float The area of the rectangle Source code in functions/area_of_rectangle.py def area_of_rectangle(width: float, height:float) -> float: \"\"\"Calculates the area of a rectangle. Takes the width and height of a rectangle and returns the area using area = width * height. Args: width (float): width of the rectangle. height (float): height of the rectangle. Returns: float: The area of the rectangle \"\"\" return width * height","title":"area_of_rectangle"},{"location":"rectangle-Area/#understanding-explanation","text":"The area of a rectangle is calculated by multipying the rectangle's width by the height. This function is a python implementation of this basic mathematical function. The formula is: Area = width x Height","title":"Understanding / Explanation"}]}